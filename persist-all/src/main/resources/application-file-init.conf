// see: https://doc.akka.io/docs/akka-persistence-jdbc/current/

akka {
  persistence {
    journal {
      plugin = "jdbc-journal"
      // Enable the line below to automatically start the journal when the actorsystem is started
      // auto-start-journals = ["jdbc-journal"]
    }
    snapshot-store {
      plugin = "jdbc-snapshot-store"
      // Enable the line below to automatically start the snapshot-store when the actorsystem is started
      // auto-start-snapshot-stores = ["jdbc-snapshot-store"]
    }
  }

  // loglevel = "WARNING"
  // stdout-loglevel = "OFF"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  log-dead-letters = off
  log-dead-letters-during-shutdown = off

  actor {
    serialization-bindings {
      // commands
      "com.github.daggerok.akka.Main$BulkInvoices" = jackson-json
      // events
      "com.github.daggerok.akka.Main$InvoiceSaved" = jackson-json
    }
  }
}

jdbc-journal {
  slick = ${slick}
}

# the akka-persistence-snapshot-store in use
jdbc-snapshot-store {
  slick = ${slick}
}

# the akka-persistence-query provider in use
jdbc-read-journal {
  slick = ${slick}
}

slick {
  profile = "slick.jdbc.H2Profile$"
  db {
    // if you want alwyas recreate fresh new schema in memory:
    //url = "jdbc:h2:mem:akka;INIT=RUNSCRIPT FROM './src/main/resources/h2-schema.sql';DATABASE_TO_UPPER=false;"

    // if you want alwyas recreate fresh new schema in ./target/akka.mv.db file:
    url = "jdbc:h2:file:./target/akka;INIT=RUNSCRIPT FROM './src/main/resources/h2-schema.sql';DATABASE_TO_UPPER=false;"

    // if you want reuse previously created ./target/akka.mv.db file, comment previous one and uncomment this on second run:
    //url = "jdbc:h2:file:./target/akka;DATABASE_TO_UPPER=false;"

    user = "akka"
    user = ${?H2_USER}
    password = "akka"
    password = ${?H2_PASSWORD}
    driver = "org.h2.Driver"
    numThreads = 5
    maxConnections = 5
    minConnections = 1
  }
}
